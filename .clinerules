# .clinerules

Используется для управления правилами и стандартами разработки в проекте **Emoji Generator**, который предназначен для нарезки пользовательских медиафайлов (видео, GIF, изображения) в формат телеграм-эмодзи, автоматического создания эмодзи-паков и отправки итоговых эмодзи-композиций через ботов (основной бот, VIP-бот и userbot).

## Project

**Name**: Emoji Generator  
**Description**:  
Приложение создаёт пак эмодзи на основе предоставленного пользователем контента, взаимодействует с Telegram API и отправляет итоговую эмодзи-композицию (а также ссылку на добавление пака). Есть три бота: `driptechbot` (основной бот для групп/чатов), `driptechvipbot` (VIP-бот для премиальных функций), `userbot` (реальный пользователь, выступающий в роли бота, способный отправлять премиум-эмодзи).

---

## Structure

### `bots/`
**Description**:  
Логика инициализации, запуска и работы нескольких телеграм-ботов (DripBot, VIP-бот).

- **bot.go** – базовые методы для работы бота, хендлеры сообщений, запуск/остановка.  
- **all.go** – инициализация всех доступных ботов и запуск/остановка.  
- **emoji.go** – обработка команды `/emoji` (основная бизнес-логика создания пака).  
- **emoji-dm.go** – обработка команды `/emoji` в личных сообщениях (DM).  
- **bot_test.go** – тестирование базовой функциональности бота.

### `mtproto/`
**Description**:  
Реализация userbot на базе MTProto (через gotd/td). Позволяет отправлять премиум-эмодзи от лица реального пользователя.

- **bot.go** – инициализация UserBot и его методы.  
- **emoji-cmd.go** – обработка команды `/emoji` через userbot.  
- **helpers.go** – вспомогательные функции (загрузка медиа, отправка сообщений и т.д.).

### `db/`
**Description**:  
Модуль доступа к базе данных. Содержит модели и методы для работы с таблицами эмодзи-паков, прав доступа, информации о ботах.

- **postgres.go** – методы CRUD в PostgreSQL (`LogEmojiCommand`, `Permissions` и др.).  
- **types.go** – структуры `EmojiPack`, `Bot` и др.  
- **postgres_test.go** – тестирование функционала БД.

### `processing/`
**Description**:  
Низкоуровневая обработка медиа (нарезка видео, удаление фона), генерация промежуточных файлов, а также вспомогательные функции для сборки паков.

- **processing.go** – нарезка и resize видео, создание *tiles*, удаление файлов и т.д.  
- **emoji-message-generator.go** – формирование итоговой эмодзи-композиции из нарезанных частей.  
- **helpers.go** – дополнительные функции (парсинг аргументов, генерация директории и т.д.).

### `types/`
**Description**:  
Общие структуры и константы, описывающие бизнес-логику: параметры команд `/emoji`, лимиты, маппинги цветов, методы для валидации.

- **types.go** – основные структуры `EmojiCommand`, `EmojiMeta`, константы.  
- **user.go** – структура `Permissions` для пользователей (VIP и т.п.).  
- **bots.go** – константы имён ботов.

### `queue/`
**Description**:  
Очередь `StickerQueue` для серийной обработки одного набора (`packLink`), чтобы избежать коллизий и превышения лимитов при массовом добавлении стикеров.

### `httpclient/`
**Description**:  
Rate-limited HTTP-клиент (`RLHTTPClient`), используемый для безопасного доступа к Telegram API с учётом лимитов.

### `main.go`
**Description**:  
Точка входа в программу. Инициализация окружения (`.env`), БД, UserBot, ботов, запуск и ожидание сигналов для корректного завершения работы.

---

## Coding Standards

1. Все новые модули и расширения должны придерживаться текущего подхода к именованию пакетов и структур.  
2. При расширении функционала необходимо переиспользовать уже существующие библиотеки и кодовые паттерны (`bot.NewDripBot`, `db.Postgres`, `userBot.SendMessageWithEmojis`, rate-limited HTTP-клиент и т.д.).  
3. Любая новая логика, связанная с обработкой медиа, должна находиться в пакете `processing/` или в подмодулях, чтобы не нарушать консистенцию архитектуры.  
4. Модули `db/`, `bots/`, `mtproto/` не должны содержать бизнес-логику нарезки или преобразования медиаконтента (это ответственность `processing/`).  
5. При работе с Telegram API (как в `bots/`, так и в `userbot`) не нарушать установленную очередь (`queue/StickerQueue`), чтобы избежать гонок при добавлении стикеров.  
6. Тесты (`X_test.go`) должны располагаться в том же пакете, что и основной код, чтобы сохранять единообразие.

---

## Instructions

- Поддерживать код в рабочем состоянии и **не ломать** существующие сценарии:
  - Команды `/emoji` в чате должны продолжить создавать пак и присылать эмодзи-композицию в чат.
  - Команды `/emoji` в DM/VIP должны работать аналогично, с учётом прав VIP (`private_generation`).
- При любых правках, связанных с VIP-функциональностью, **не нарушать** принцип единого кода:
  - `permission.Vip` должен учитываться в боте, userbot и в mtproto, чтобы корректно обрабатывать платные/бесплатные сценарии.
- Если требуются новые сущности в БД — дополнять или расширять имеющуюся схему в `migrations/`.
- Рекомендуется использовать пакет `testify` для юнит-тестов (пример см. `bot_test.go`, `postgres_test.go`).

